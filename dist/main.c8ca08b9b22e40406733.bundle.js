/*! For license information please see main.c8ca08b9b22e40406733.bundle.js.LICENSE.txt */
(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{L:()=>H,G:()=>z});try{self["workbox:window:7.0.0"]&&_()}catch(n){}function n(t,e){return new Promise((function(n){var r=new MessageChannel;r.port1.onmessage=function(t){n(t.data)},t.postMessage(e,[r.port2])}))}function r(t){var e=function(t){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var n=e.call(t,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==typeof e?e:e+""}function o(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,r(o.key),o)}}function i(t,e){return i=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},i(t,e)}function a(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}try{self["workbox:core:7.0.0"]&&_()}catch(n){}var c=function(){var t=this;this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))};function s(t,e){var n=location.href;return new URL(t,n).href===new URL(e,n).href}var u=function(t,e){this.type=t,Object.assign(this,e)};function l(t,e,n){return n?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}function f(){}var h={type:"SKIP_WAITING"};function d(t,e){if(!e)return t&&t.then?t.then(f):Promise.resolve()}var v=function(t){function e(e,n){var r,o;return void 0===n&&(n={}),(r=t.call(this)||this).nn={},r.tn=0,r.rn=new c,r.en=new c,r.on=new c,r.un=0,r.an=new Set,r.cn=function(){var t=r.fn,e=t.installing;r.tn>0||!s(e.scriptURL,r.sn.toString())||performance.now()>r.un+6e4?(r.vn=e,t.removeEventListener("updatefound",r.cn)):(r.hn=e,r.an.add(e),r.rn.resolve(e)),++r.tn,e.addEventListener("statechange",r.ln)},r.ln=function(t){var e=r.fn,n=t.target,o=n.state,i=n===r.vn,a={sw:n,isExternal:i,originalEvent:t};!i&&r.mn&&(a.isUpdate=!0),r.dispatchEvent(new u(o,a)),"installed"===o?r.wn=self.setTimeout((function(){"installed"===o&&e.waiting===n&&r.dispatchEvent(new u("waiting",a))}),200):"activating"===o&&(clearTimeout(r.wn),i||r.en.resolve(n))},r.yn=function(t){var e=r.hn,n=e!==navigator.serviceWorker.controller;r.dispatchEvent(new u("controlling",{isExternal:n,originalEvent:t,sw:e,isUpdate:r.mn})),n||r.on.resolve(e)},r.gn=(o=function(t){var e=t.data,n=t.ports,o=t.source;return l(r.getSW(),(function(){r.an.has(o)&&r.dispatchEvent(new u("message",{data:e,originalEvent:t,ports:n,sw:o}))}))},function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];try{return Promise.resolve(o.apply(this,t))}catch(t){return Promise.reject(t)}}),r.sn=e,r.nn=n,navigator.serviceWorker.addEventListener("message",r.gn),r}var r,a;a=t,(r=e).prototype=Object.create(a.prototype),r.prototype.constructor=r,i(r,a);var f,v,p=e.prototype;return p.register=function(t){var e=(void 0===t?{}:t).immediate,n=void 0!==e&&e;try{var r=this;return l(function(t,e){var n=t();return n&&n.then?n.then(e):e()}((function(){if(!n&&"complete"!==document.readyState)return d(new Promise((function(t){return window.addEventListener("load",t)})))}),(function(){return r.mn=Boolean(navigator.serviceWorker.controller),r.dn=r.pn(),l(r.bn(),(function(t){r.fn=t,r.dn&&(r.hn=r.dn,r.en.resolve(r.dn),r.on.resolve(r.dn),r.dn.addEventListener("statechange",r.ln,{once:!0}));var e=r.fn.waiting;return e&&s(e.scriptURL,r.sn.toString())&&(r.hn=e,Promise.resolve().then((function(){r.dispatchEvent(new u("waiting",{sw:e,wasWaitingBeforeRegister:!0}))})).then((function(){}))),r.hn&&(r.rn.resolve(r.hn),r.an.add(r.hn)),r.fn.addEventListener("updatefound",r.cn),navigator.serviceWorker.addEventListener("controllerchange",r.yn),r.fn}))})))}catch(t){return Promise.reject(t)}},p.update=function(){try{return this.fn?l(d(this.fn.update())):l()}catch(t){return Promise.reject(t)}},p.getSW=function(){return void 0!==this.hn?Promise.resolve(this.hn):this.rn.promise},p.messageSW=function(t){try{return l(this.getSW(),(function(e){return n(e,t)}))}catch(t){return Promise.reject(t)}},p.messageSkipWaiting=function(){this.fn&&this.fn.waiting&&n(this.fn.waiting,h)},p.pn=function(){var t=navigator.serviceWorker.controller;return t&&s(t.scriptURL,this.sn.toString())?t:void 0},p.bn=function(){try{var t=this;return l(function(t,e){try{var n=t()}catch(t){return e(t)}return n&&n.then?n.then(void 0,e):n}((function(){return l(navigator.serviceWorker.register(t.sn,t.nn),(function(e){return t.un=performance.now(),e}))}),(function(t){throw t})))}catch(t){return Promise.reject(t)}},f=e,(v=[{key:"active",get:function(){return this.en.promise}},{key:"controlling",get:function(){return this.on.promise}}])&&o(f.prototype,v),Object.defineProperty(f,"prototype",{writable:!1}),f}(function(){function t(){this.Pn=new Map}var e=t.prototype;return e.addEventListener=function(t,e){this.jn(t).add(e)},e.removeEventListener=function(t,e){this.jn(t).delete(e)},e.dispatchEvent=function(t){t.target=this;for(var e,n=function(t){var e="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(e)return(e=e.call(t)).next.bind(e);if(Array.isArray(t)||(e=function(t,e){if(t){if("string"==typeof t)return a(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?a(t,e):void 0}}(t))){e&&(t=e);var n=0;return function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(this.jn(t.type));!(e=n()).done;)(0,e.value)(t)},e.jn=function(t){return this.Pn.has(t)||this.Pn.set(t,new Set),this.Pn.get(t)},t}());const p=(t,e)=>e.some((e=>t instanceof e));let y,g;const m=new WeakMap,w=new WeakMap,b=new WeakMap;let E={get(t,e,n){if(t instanceof IDBTransaction){if("done"===e)return m.get(t);if("store"===e)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return j(t[e])},set:(t,e,n)=>(t[e]=n,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function L(t){E=t(E)}function S(t){return"function"==typeof t?(e=t,(g||(g=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(x(this),t),j(this.request)}:function(...t){return j(e.apply(x(this),t))}):(t instanceof IDBTransaction&&function(t){if(m.has(t))return;const e=new Promise(((e,n)=>{const r=()=>{t.removeEventListener("complete",o),t.removeEventListener("error",i),t.removeEventListener("abort",i)},o=()=>{e(),r()},i=()=>{n(t.error||new DOMException("AbortError","AbortError")),r()};t.addEventListener("complete",o),t.addEventListener("error",i),t.addEventListener("abort",i)}));m.set(t,e)}(t),p(t,y||(y=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,E):t);var e}function j(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,n)=>{const r=()=>{t.removeEventListener("success",o),t.removeEventListener("error",i)},o=()=>{e(j(t.result)),r()},i=()=>{n(t.error),r()};t.addEventListener("success",o),t.addEventListener("error",i)}));return b.set(e,t),e}(t);if(w.has(t))return w.get(t);const e=S(t);return e!==t&&(w.set(t,e),b.set(e,t)),e}const x=t=>b.get(t);function P(t,e,{blocked:n,upgrade:r,blocking:o,terminated:i}={}){const a=indexedDB.open(t,e),c=j(a);return r&&a.addEventListener("upgradeneeded",(t=>{r(j(a.result),t.oldVersion,t.newVersion,j(a.transaction),t)})),n&&a.addEventListener("blocked",(t=>n(t.oldVersion,t.newVersion,t))),c.then((t=>{i&&t.addEventListener("close",(()=>i())),o&&t.addEventListener("versionchange",(t=>o(t.oldVersion,t.newVersion,t)))})).catch((()=>{})),c}const I=["get","getKey","getAll","getAllKeys","count"],k=["put","add","delete","clear"],O=new Map;function D(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(O.get(e))return O.get(e);const n=e.replace(/FromIndex$/,""),r=e!==n,o=k.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!o&&!I.includes(n))return;const i=async function(t,...e){const i=this.transaction(t,o?"readwrite":"readonly");let a=i.store;return r&&(a=a.index(e.shift())),(await Promise.all([a[n](...e),o&&i.done]))[0]};return O.set(e,i),i}L((t=>({...t,get:(e,n,r)=>D(e,n)||t.get(e,n,r),has:(e,n)=>!!D(e,n)||t.has(e,n)})));const B=["continue","continuePrimaryKey","advance"],T={},W=new WeakMap,M=new WeakMap,A={get(t,e){if(!B.includes(e))return t[e];let n=T[e];return n||(n=T[e]=function(...t){W.set(this,M.get(this)[e](...t))}),n}};async function*C(...t){let e=this;if(e instanceof IDBCursor||(e=await e.openCursor(...t)),!e)return;const n=new Proxy(e,A);for(M.set(n,e),b.set(n,x(e));e;)yield n,e=await(W.get(n)||e.continue()),W.delete(n)}function N(t,e){return e===Symbol.asyncIterator&&p(t,[IDBIndex,IDBObjectStore,IDBCursor])||"iterate"===e&&p(t,[IDBIndex,IDBObjectStore])}function G(t){return G="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},G(t)}function U(){U=function(){return e};var t,e={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(t,e,n){t[e]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function u(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,n){return t[e]=n}}function l(t,e,n,r){var i=e&&e.prototype instanceof g?e:g,a=Object.create(i.prototype),c=new O(r||[]);return o(a,"_invoke",{value:x(t,n,c)}),a}function f(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=l;var h="suspendedStart",d="suspendedYield",v="executing",p="completed",y={};function g(){}function m(){}function w(){}var b={};u(b,a,(function(){return this}));var _=Object.getPrototypeOf,E=_&&_(_(D([])));E&&E!==n&&r.call(E,a)&&(b=E);var L=w.prototype=g.prototype=Object.create(b);function S(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function j(t,e){function n(o,i,a,c){var s=f(t[o],t,i);if("throw"!==s.type){var u=s.arg,l=u.value;return l&&"object"==G(l)&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,c)}),(function(t){n("throw",t,a,c)})):e.resolve(l).then((function(t){u.value=t,a(u)}),(function(t){return n("throw",t,a,c)}))}c(s.arg)}var i;o(this,"_invoke",{value:function(t,r){function o(){return new e((function(e,o){n(t,r,e,o)}))}return i=i?i.then(o,o):o()}})}function x(e,n,r){var o=h;return function(i,a){if(o===v)throw Error("Generator is already running");if(o===p){if("throw"===i)throw a;return{value:t,done:!0}}for(r.method=i,r.arg=a;;){var c=r.delegate;if(c){var s=P(c,r);if(s){if(s===y)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===h)throw o=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=v;var u=f(e,n,r);if("normal"===u.type){if(o=r.done?p:d,u.arg===y)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=p,r.method="throw",r.arg=u.arg)}}}function P(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,P(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),y;var i=f(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,y;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,y):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y)}function I(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function k(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(I,this),this.reset(!0)}function D(e){if(e||""===e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}throw new TypeError(G(e)+" is not iterable")}return m.prototype=w,o(L,"constructor",{value:w,configurable:!0}),o(w,"constructor",{value:m,configurable:!0}),m.displayName=u(w,s,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===m||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,w):(t.__proto__=w,u(t,s,"GeneratorFunction")),t.prototype=Object.create(L),t},e.awrap=function(t){return{__await:t}},S(j.prototype),u(j.prototype,c,(function(){return this})),e.AsyncIterator=j,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new j(l(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},S(L),u(L,s,"Generator"),u(L,a,(function(){return this})),u(L,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},e.values=D,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(k),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var s=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(s&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),k(n),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;k(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:D(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),y}},e}function V(t,e,n,r,o,i,a){try{var c=t[i](a),s=c.value}catch(t){return void n(t)}c.done?e(s):Promise.resolve(s).then(r,o)}function R(t){return function(){var e=this,n=arguments;return new Promise((function(r,o){var i=t.apply(e,n);function a(t){V(i,r,o,a,c,"next",t)}function c(t){V(i,r,o,a,c,"throw",t)}a(void 0)}))}}L((t=>({...t,get:(e,n,r)=>N(e,n)?C:t.get(e,n,r),has:(e,n)=>N(e,n)||t.has(e,n)})));var F="jate",K="jate",q=function(){var t=R(U().mark((function t(){return U().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,P(F,1,{upgrade:function(t){t.objectStoreNames.contains(K)||(t.createObjectStore(K,{keyPath:"id",autoIncrement:!0}),console.log("".concat(K," object store created")))}});case 3:t.sent,console.log("".concat(F," database initialized")),t.next=10;break;case 7:t.prev=7,t.t0=t.catch(0),console.error("Error initializing the database",t.t0);case 10:case"end":return t.stop()}}),t,null,[[0,7]])})));return function(){return t.apply(this,arguments)}}(),z=function(){var t=R(U().mark((function t(e){var n,r,o,i;return U().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return console.log("PUT to the database"),t.prev=1,t.next=4,P(F,1);case 4:return n=t.sent,r=n.transaction(K,"readwrite"),o=r.objectStore(K),i=o.put({id:1,content:e}),t.next=10,i;case 10:console.log("Data saved to the database"),t.next=16;break;case 13:t.prev=13,t.t0=t.catch(1),console.error("Error saving data to the database",t.t0);case 16:case"end":return t.stop()}}),t,null,[[1,13]])})));return function(e){return t.apply(this,arguments)}}(),H=function(){var t=R(U().mark((function t(){var e,n,r,o,i;return U().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return console.log("GET all from the database"),t.prev=1,t.next=4,P(F,1);case 4:return e=t.sent,n=e.transaction(K,"readonly"),r=n.objectStore(K),o=r.getAll(),t.next=10,o;case 10:return i=t.sent,console.log("Data retrieved from the database",i),t.abrupt("return",i.length>0?i[0].content:null);case 15:t.prev=15,t.t0=t.catch(1),console.error("Error retrieving data from the database",t.t0);case 18:case"end":return t.stop()}}),t,null,[[1,15]])})));return function(){return t.apply(this,arguments)}}();function Y(t){return Y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Y(t)}function $(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,Q(r.key),r)}}function J(t,e,n){return e&&$(t.prototype,e),n&&$(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function Q(t){var e=function(t){if("object"!=Y(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var n=e.call(t,"string");if("object"!=Y(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==Y(e)?e:e+""}q().then((function(){z("Test content").then((function(){H()}))}));var X,Z=J((function t(){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var r=localStorage.getItem("content");if("undefined"==typeof CodeMirror)throw new Error("CodeMirror is not loaded");this.editor=CodeMirror(document.querySelector("#main"),{value:"",mode:"javascript",theme:"monokai",lineNumbers:!0,lineWrapping:!0,autofocus:!0,indentUnit:2,tabSize:2}),(0,e.initdb)(),H().then((function(t){console.info("Loaded data from IndexedDB, injecting into editor"),n.editor.setValue(t||r||"\n/*\n       _____  ____________\n      / /   |/_  __/ ____/\n __  / / /| | / / / __/   \n/ /_/ / ___ |/ / / /___   \n ____/_/  |_/_/ /_____/   \njust another text editor\n*/                          \n")})),this.editor.on("change",(function(){localStorage.setItem("content",n.editor.getValue())})),this.editor.on("blur",(function(){console.log("The editor has lost focus"),z(localStorage.getItem("content"))}))})),tt=document.querySelector("#main");tt.innerHTML="",void 0===new Z&&((X=document.createElement("div")).classList.add("spinner"),X.innerHTML='\n  <div class="loading-container">\n    <div class="loading-spinner"></div>\n  </div>\n  ',tt.appendChild(X)),"serviceWorker"in navigator?new v("/service-worker.js").register():console.error("Service workers are not supported in this browser.")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RjJFWCxJQUVBaFIsS0FBS29SLE9BQU8vUCxHQUFHLFVBQVUsV0FDdkI0UCxhQUFhYyxRQUFRLFVBQVdqQixFQUFLTSxPQUFPWSxXQUM5QyxJQUdBaFMsS0FBS29SLE9BQU8vUCxHQUFHLFFBQVEsV0FDckJxTyxRQUFRQyxJQUFJLDZCQUNaRyxFQUFNbUIsYUFBYUMsUUFBUSxXQUM3QixHQUNGLElDaEZJZSxHQUFPN04sU0FBU2lOLGNBQWMsU0FDcENZLEdBQUtDLFVBQVksUUFjSyxJQURQLElBQUlDLEtBVlh4QixFQUFVdk0sU0FBU2dPLGNBQWMsUUFDL0JDLFVBQVVqUSxJQUFJLFdBQ3RCdU8sRUFBUXVCLFVBQVksNkZBS3BCRCxHQUFLSyxZQUFZM0IsSUFTZixrQkFBbUJ2TixVQUVILElBQUltUCxFQUFRLHNCQUNwQnJPLFdBRVZ3TCxRQUFRN0gsTUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL2phdGUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vamF0ZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vamF0ZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2phdGUvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9qYXRlLy4vbm9kZV9tb2R1bGVzL3dvcmtib3gtd2luZG93L2J1aWxkL3dvcmtib3gtd2luZG93LnByb2QuZXM1Lm1qcyIsIndlYnBhY2s6Ly9qYXRlLy4vbm9kZV9tb2R1bGVzL2lkYi9idWlsZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9qYXRlLy4vY2xpZW50L3NyYy9qcy9kYXRhYmFzZS5qcyIsIndlYnBhY2s6Ly9qYXRlLy4vY2xpZW50L3NyYy9qcy9lZGl0b3IuanMiLCJ3ZWJwYWNrOi8vamF0ZS8uL2NsaWVudC9zcmMvanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vamF0ZS8uL2NsaWVudC9zcmMvanMvaGVhZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidHJ5e3NlbGZbXCJ3b3JrYm94OndpbmRvdzo3LjAuMFwiXSYmXygpfWNhdGNoKG4pe31mdW5jdGlvbiBuKG4sdCl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihyKXt2YXIgZT1uZXcgTWVzc2FnZUNoYW5uZWw7ZS5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24obil7cihuLmRhdGEpfSxuLnBvc3RNZXNzYWdlKHQsW2UucG9ydDJdKX0pKX1mdW5jdGlvbiB0KG4pe3ZhciB0PWZ1bmN0aW9uKG4sdCl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIG58fCFuKXJldHVybiBuO3ZhciByPW5bU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1yKXt2YXIgZT1yLmNhbGwobix0fHxcImRlZmF1bHRcIik7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUpcmV0dXJuIGU7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpfXJldHVybihcInN0cmluZ1wiPT09dD9TdHJpbmc6TnVtYmVyKShuKX0obixcInN0cmluZ1wiKTtyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgdD90OnQrXCJcIn1mdW5jdGlvbiByKG4scil7Zm9yKHZhciBlPTA7ZTxyLmxlbmd0aDtlKyspe3ZhciBpPXJbZV07aS5lbnVtZXJhYmxlPWkuZW51bWVyYWJsZXx8ITEsaS5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gaSYmKGkud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLHQoaS5rZXkpLGkpfX1mdW5jdGlvbiBlKG4sdCl7cmV0dXJuIGU9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24obix0KXtyZXR1cm4gbi5fX3Byb3RvX189dCxufSxlKG4sdCl9ZnVuY3Rpb24gaShuLHQpeyhudWxsPT10fHx0Pm4ubGVuZ3RoKSYmKHQ9bi5sZW5ndGgpO2Zvcih2YXIgcj0wLGU9bmV3IEFycmF5KHQpO3I8dDtyKyspZVtyXT1uW3JdO3JldHVybiBlfWZ1bmN0aW9uIG8obix0KXt2YXIgcj1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZuW1N5bWJvbC5pdGVyYXRvcl18fG5bXCJAQGl0ZXJhdG9yXCJdO2lmKHIpcmV0dXJuKHI9ci5jYWxsKG4pKS5uZXh0LmJpbmQocik7aWYoQXJyYXkuaXNBcnJheShuKXx8KHI9ZnVuY3Rpb24obix0KXtpZihuKXtpZihcInN0cmluZ1wiPT10eXBlb2YgbilyZXR1cm4gaShuLHQpO3ZhciByPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuKS5zbGljZSg4LC0xKTtyZXR1cm5cIk9iamVjdFwiPT09ciYmbi5jb25zdHJ1Y3RvciYmKHI9bi5jb25zdHJ1Y3Rvci5uYW1lKSxcIk1hcFwiPT09cnx8XCJTZXRcIj09PXI/QXJyYXkuZnJvbShuKTpcIkFyZ3VtZW50c1wiPT09cnx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3Qocik/aShuLHQpOnZvaWQgMH19KG4pKXx8dCYmbiYmXCJudW1iZXJcIj09dHlwZW9mIG4ubGVuZ3RoKXtyJiYobj1yKTt2YXIgZT0wO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlPj1uLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6bltlKytdfX19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXRyeXtzZWxmW1wid29ya2JveDpjb3JlOjcuMC4wXCJdJiZfKCl9Y2F0Y2gobil7fXZhciB1PWZ1bmN0aW9uKCl7dmFyIG49dGhpczt0aGlzLnByb21pc2U9bmV3IFByb21pc2UoKGZ1bmN0aW9uKHQscil7bi5yZXNvbHZlPXQsbi5yZWplY3Q9cn0pKX07ZnVuY3Rpb24gYShuLHQpe3ZhciByPWxvY2F0aW9uLmhyZWY7cmV0dXJuIG5ldyBVUkwobixyKS5ocmVmPT09bmV3IFVSTCh0LHIpLmhyZWZ9dmFyIGM9ZnVuY3Rpb24obix0KXt0aGlzLnR5cGU9bixPYmplY3QuYXNzaWduKHRoaXMsdCl9O2Z1bmN0aW9uIGYobix0LHIpe3JldHVybiByP3Q/dChuKTpuOihuJiZuLnRoZW58fChuPVByb21pc2UucmVzb2x2ZShuKSksdD9uLnRoZW4odCk6bil9ZnVuY3Rpb24gcygpe312YXIgdj17dHlwZTpcIlNLSVBfV0FJVElOR1wifTtmdW5jdGlvbiBoKG4sdCl7aWYoIXQpcmV0dXJuIG4mJm4udGhlbj9uLnRoZW4ocyk6UHJvbWlzZS5yZXNvbHZlKCl9dmFyIGw9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gaShuLHIpe3ZhciBlLGk7cmV0dXJuIHZvaWQgMD09PXImJihyPXt9KSwoZT10LmNhbGwodGhpcyl8fHRoaXMpLm5uPXt9LGUudG49MCxlLnJuPW5ldyB1LGUuZW49bmV3IHUsZS5vbj1uZXcgdSxlLnVuPTAsZS5hbj1uZXcgU2V0LGUuY249ZnVuY3Rpb24oKXt2YXIgbj1lLmZuLHQ9bi5pbnN0YWxsaW5nO2UudG4+MHx8IWEodC5zY3JpcHRVUkwsZS5zbi50b1N0cmluZygpKXx8cGVyZm9ybWFuY2Uubm93KCk+ZS51bis2ZTQ/KGUudm49dCxuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVmb3VuZFwiLGUuY24pKTooZS5obj10LGUuYW4uYWRkKHQpLGUucm4ucmVzb2x2ZSh0KSksKytlLnRuLHQuYWRkRXZlbnRMaXN0ZW5lcihcInN0YXRlY2hhbmdlXCIsZS5sbil9LGUubG49ZnVuY3Rpb24obil7dmFyIHQ9ZS5mbixyPW4udGFyZ2V0LGk9ci5zdGF0ZSxvPXI9PT1lLnZuLHU9e3N3OnIsaXNFeHRlcm5hbDpvLG9yaWdpbmFsRXZlbnQ6bn07IW8mJmUubW4mJih1LmlzVXBkYXRlPSEwKSxlLmRpc3BhdGNoRXZlbnQobmV3IGMoaSx1KSksXCJpbnN0YWxsZWRcIj09PWk/ZS53bj1zZWxmLnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7XCJpbnN0YWxsZWRcIj09PWkmJnQud2FpdGluZz09PXImJmUuZGlzcGF0Y2hFdmVudChuZXcgYyhcIndhaXRpbmdcIix1KSl9KSwyMDApOlwiYWN0aXZhdGluZ1wiPT09aSYmKGNsZWFyVGltZW91dChlLnduKSxvfHxlLmVuLnJlc29sdmUocikpfSxlLnluPWZ1bmN0aW9uKG4pe3ZhciB0PWUuaG4scj10IT09bmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlcjtlLmRpc3BhdGNoRXZlbnQobmV3IGMoXCJjb250cm9sbGluZ1wiLHtpc0V4dGVybmFsOnIsb3JpZ2luYWxFdmVudDpuLHN3OnQsaXNVcGRhdGU6ZS5tbn0pKSxyfHxlLm9uLnJlc29sdmUodCl9LGUuZ249KGk9ZnVuY3Rpb24obil7dmFyIHQ9bi5kYXRhLHI9bi5wb3J0cyxpPW4uc291cmNlO3JldHVybiBmKGUuZ2V0U1coKSwoZnVuY3Rpb24oKXtlLmFuLmhhcyhpKSYmZS5kaXNwYXRjaEV2ZW50KG5ldyBjKFwibWVzc2FnZVwiLHtkYXRhOnQsb3JpZ2luYWxFdmVudDpuLHBvcnRzOnIsc3c6aX0pKX0pKX0sZnVuY3Rpb24oKXtmb3IodmFyIG49W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspblt0XT1hcmd1bWVudHNbdF07dHJ5e3JldHVybiBQcm9taXNlLnJlc29sdmUoaS5hcHBseSh0aGlzLG4pKX1jYXRjaChuKXtyZXR1cm4gUHJvbWlzZS5yZWplY3Qobil9fSksZS5zbj1uLGUubm49cixuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGUuZ24pLGV9dmFyIG8scztzPXQsKG89aSkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUocy5wcm90b3R5cGUpLG8ucHJvdG90eXBlLmNvbnN0cnVjdG9yPW8sZShvLHMpO3ZhciBsLG0sdyx5PWkucHJvdG90eXBlO3JldHVybiB5LnJlZ2lzdGVyPWZ1bmN0aW9uKG4pe3ZhciB0PSh2b2lkIDA9PT1uP3t9Om4pLmltbWVkaWF0ZSxyPXZvaWQgMCE9PXQmJnQ7dHJ5e3ZhciBlPXRoaXM7cmV0dXJuIGYoZnVuY3Rpb24obix0KXt2YXIgcj1uKCk7aWYociYmci50aGVuKXJldHVybiByLnRoZW4odCk7cmV0dXJuIHQocil9KChmdW5jdGlvbigpe2lmKCFyJiZcImNvbXBsZXRlXCIhPT1kb2N1bWVudC5yZWFkeVN0YXRlKXJldHVybiBoKG5ldyBQcm9taXNlKChmdW5jdGlvbihuKXtyZXR1cm4gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsbil9KSkpfSksKGZ1bmN0aW9uKCl7cmV0dXJuIGUubW49Qm9vbGVhbihuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyKSxlLmRuPWUucG4oKSxmKGUuYm4oKSwoZnVuY3Rpb24obil7ZS5mbj1uLGUuZG4mJihlLmhuPWUuZG4sZS5lbi5yZXNvbHZlKGUuZG4pLGUub24ucmVzb2x2ZShlLmRuKSxlLmRuLmFkZEV2ZW50TGlzdGVuZXIoXCJzdGF0ZWNoYW5nZVwiLGUubG4se29uY2U6ITB9KSk7dmFyIHQ9ZS5mbi53YWl0aW5nO3JldHVybiB0JiZhKHQuc2NyaXB0VVJMLGUuc24udG9TdHJpbmcoKSkmJihlLmhuPXQsUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoZnVuY3Rpb24oKXtlLmRpc3BhdGNoRXZlbnQobmV3IGMoXCJ3YWl0aW5nXCIse3N3OnQsd2FzV2FpdGluZ0JlZm9yZVJlZ2lzdGVyOiEwfSkpfSkpLnRoZW4oKGZ1bmN0aW9uKCl7fSkpKSxlLmhuJiYoZS5ybi5yZXNvbHZlKGUuaG4pLGUuYW4uYWRkKGUuaG4pKSxlLmZuLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVmb3VuZFwiLGUuY24pLG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJjb250cm9sbGVyY2hhbmdlXCIsZS55biksZS5mbn0pKX0pKSl9Y2F0Y2gobil7cmV0dXJuIFByb21pc2UucmVqZWN0KG4pfX0seS51cGRhdGU9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIHRoaXMuZm4/ZihoKHRoaXMuZm4udXBkYXRlKCkpKTpmKCl9Y2F0Y2gobil7cmV0dXJuIFByb21pc2UucmVqZWN0KG4pfX0seS5nZXRTVz1mdW5jdGlvbigpe3JldHVybiB2b2lkIDAhPT10aGlzLmhuP1Byb21pc2UucmVzb2x2ZSh0aGlzLmhuKTp0aGlzLnJuLnByb21pc2V9LHkubWVzc2FnZVNXPWZ1bmN0aW9uKHQpe3RyeXtyZXR1cm4gZih0aGlzLmdldFNXKCksKGZ1bmN0aW9uKHIpe3JldHVybiBuKHIsdCl9KSl9Y2F0Y2gobil7cmV0dXJuIFByb21pc2UucmVqZWN0KG4pfX0seS5tZXNzYWdlU2tpcFdhaXRpbmc9ZnVuY3Rpb24oKXt0aGlzLmZuJiZ0aGlzLmZuLndhaXRpbmcmJm4odGhpcy5mbi53YWl0aW5nLHYpfSx5LnBuPWZ1bmN0aW9uKCl7dmFyIG49bmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlcjtyZXR1cm4gbiYmYShuLnNjcmlwdFVSTCx0aGlzLnNuLnRvU3RyaW5nKCkpP246dm9pZCAwfSx5LmJuPWZ1bmN0aW9uKCl7dHJ5e3ZhciBuPXRoaXM7cmV0dXJuIGYoZnVuY3Rpb24obix0KXt0cnl7dmFyIHI9bigpfWNhdGNoKG4pe3JldHVybiB0KG4pfWlmKHImJnIudGhlbilyZXR1cm4gci50aGVuKHZvaWQgMCx0KTtyZXR1cm4gcn0oKGZ1bmN0aW9uKCl7cmV0dXJuIGYobmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIobi5zbixuLm5uKSwoZnVuY3Rpb24odCl7cmV0dXJuIG4udW49cGVyZm9ybWFuY2Uubm93KCksdH0pKX0pLChmdW5jdGlvbihuKXt0aHJvdyBufSkpKX1jYXRjaChuKXtyZXR1cm4gUHJvbWlzZS5yZWplY3Qobil9fSxsPWksKG09W3trZXk6XCJhY3RpdmVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbi5wcm9taXNlfX0se2tleTpcImNvbnRyb2xsaW5nXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub24ucHJvbWlzZX19XSkmJnIobC5wcm90b3R5cGUsbSksdyYmcihsLHcpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShsLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksbH0oZnVuY3Rpb24oKXtmdW5jdGlvbiBuKCl7dGhpcy5Qbj1uZXcgTWFwfXZhciB0PW4ucHJvdG90eXBlO3JldHVybiB0LmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24obix0KXt0aGlzLmpuKG4pLmFkZCh0KX0sdC5yZW1vdmVFdmVudExpc3RlbmVyPWZ1bmN0aW9uKG4sdCl7dGhpcy5qbihuKS5kZWxldGUodCl9LHQuZGlzcGF0Y2hFdmVudD1mdW5jdGlvbihuKXtuLnRhcmdldD10aGlzO2Zvcih2YXIgdCxyPW8odGhpcy5qbihuLnR5cGUpKTshKHQ9cigpKS5kb25lOyl7KDAsdC52YWx1ZSkobil9fSx0LmpuPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLlBuLmhhcyhuKXx8dGhpcy5Qbi5zZXQobixuZXcgU2V0KSx0aGlzLlBuLmdldChuKX0sbn0oKSk7ZXhwb3J0e2wgYXMgV29ya2JveCxjIGFzIFdvcmtib3hFdmVudCxuIGFzIG1lc3NhZ2VTV307XG4vLyMgc291cmNlTWFwcGluZ1VSTD13b3JrYm94LXdpbmRvdy5wcm9kLmVzNS5tanMubWFwXG4iLCJjb25zdCBpbnN0YW5jZU9mQW55ID0gKG9iamVjdCwgY29uc3RydWN0b3JzKSA9PiBjb25zdHJ1Y3RvcnMuc29tZSgoYykgPT4gb2JqZWN0IGluc3RhbmNlb2YgYyk7XG5cbmxldCBpZGJQcm94eWFibGVUeXBlcztcbmxldCBjdXJzb3JBZHZhbmNlTWV0aG9kcztcbi8vIFRoaXMgaXMgYSBmdW5jdGlvbiB0byBwcmV2ZW50IGl0IHRocm93aW5nIHVwIGluIG5vZGUgZW52aXJvbm1lbnRzLlxuZnVuY3Rpb24gZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSB7XG4gICAgcmV0dXJuIChpZGJQcm94eWFibGVUeXBlcyB8fFxuICAgICAgICAoaWRiUHJveHlhYmxlVHlwZXMgPSBbXG4gICAgICAgICAgICBJREJEYXRhYmFzZSxcbiAgICAgICAgICAgIElEQk9iamVjdFN0b3JlLFxuICAgICAgICAgICAgSURCSW5kZXgsXG4gICAgICAgICAgICBJREJDdXJzb3IsXG4gICAgICAgICAgICBJREJUcmFuc2FjdGlvbixcbiAgICAgICAgXSkpO1xufVxuLy8gVGhpcyBpcyBhIGZ1bmN0aW9uIHRvIHByZXZlbnQgaXQgdGhyb3dpbmcgdXAgaW4gbm9kZSBlbnZpcm9ubWVudHMuXG5mdW5jdGlvbiBnZXRDdXJzb3JBZHZhbmNlTWV0aG9kcygpIHtcbiAgICByZXR1cm4gKGN1cnNvckFkdmFuY2VNZXRob2RzIHx8XG4gICAgICAgIChjdXJzb3JBZHZhbmNlTWV0aG9kcyA9IFtcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuYWR2YW5jZSxcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWUsXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmNvbnRpbnVlUHJpbWFyeUtleSxcbiAgICAgICAgXSkpO1xufVxuY29uc3QgdHJhbnNhY3Rpb25Eb25lTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zZm9ybUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHJldmVyc2VUcmFuc2Zvcm1DYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCB1bmxpc3RlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xuICAgICAgICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUod3JhcChyZXF1ZXN0LnJlc3VsdCkpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBzdWNjZXNzKTtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICB9KTtcbiAgICAvLyBUaGlzIG1hcHBpbmcgZXhpc3RzIGluIHJldmVyc2VUcmFuc2Zvcm1DYWNoZSBidXQgZG9lc24ndCBkb2Vzbid0IGV4aXN0IGluIHRyYW5zZm9ybUNhY2hlLiBUaGlzXG4gICAgLy8gaXMgYmVjYXVzZSB3ZSBjcmVhdGUgbWFueSBwcm9taXNlcyBmcm9tIGEgc2luZ2xlIElEQlJlcXVlc3QuXG4gICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChwcm9taXNlLCByZXF1ZXN0KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbih0eCkge1xuICAgIC8vIEVhcmx5IGJhaWwgaWYgd2UndmUgYWxyZWFkeSBjcmVhdGVkIGEgZG9uZSBwcm9taXNlIGZvciB0aGlzIHRyYW5zYWN0aW9uLlxuICAgIGlmICh0cmFuc2FjdGlvbkRvbmVNYXAuaGFzKHR4KSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGRvbmUgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCBjb21wbGV0ZSk7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KHR4LmVycm9yIHx8IG5ldyBET01FeGNlcHRpb24oJ0Fib3J0RXJyb3InLCAnQWJvcnRFcnJvcicpKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBlcnJvcik7XG4gICAgfSk7XG4gICAgLy8gQ2FjaGUgaXQgZm9yIGxhdGVyIHJldHJpZXZhbC5cbiAgICB0cmFuc2FjdGlvbkRvbmVNYXAuc2V0KHR4LCBkb25lKTtcbn1cbmxldCBpZGJQcm94eVRyYXBzID0ge1xuICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgLy8gU3BlY2lhbCBoYW5kbGluZyBmb3IgdHJhbnNhY3Rpb24uZG9uZS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnZG9uZScpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uRG9uZU1hcC5nZXQodGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIE1ha2UgdHguc3RvcmUgcmV0dXJuIHRoZSBvbmx5IHN0b3JlIGluIHRoZSB0cmFuc2FjdGlvbiwgb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGFyZSBtYW55LlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdzdG9yZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZXIub2JqZWN0U3RvcmVOYW1lc1sxXVxuICAgICAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA6IHJlY2VpdmVyLm9iamVjdFN0b3JlKHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEVsc2UgdHJhbnNmb3JtIHdoYXRldmVyIHdlIGdldCBiYWNrLlxuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXRbcHJvcF0pO1xuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24gJiZcbiAgICAgICAgICAgIChwcm9wID09PSAnZG9uZScgfHwgcHJvcCA9PT0gJ3N0b3JlJykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wIGluIHRhcmdldDtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIHJlcGxhY2VUcmFwcyhjYWxsYmFjaykge1xuICAgIGlkYlByb3h5VHJhcHMgPSBjYWxsYmFjayhpZGJQcm94eVRyYXBzKTtcbn1cbmZ1bmN0aW9uIHdyYXBGdW5jdGlvbihmdW5jKSB7XG4gICAgLy8gRHVlIHRvIGV4cGVjdGVkIG9iamVjdCBlcXVhbGl0eSAod2hpY2ggaXMgZW5mb3JjZWQgYnkgdGhlIGNhY2hpbmcgaW4gYHdyYXBgKSwgd2VcbiAgICAvLyBvbmx5IGNyZWF0ZSBvbmUgbmV3IGZ1bmMgcGVyIGZ1bmMuXG4gICAgLy8gQ3Vyc29yIG1ldGhvZHMgYXJlIHNwZWNpYWwsIGFzIHRoZSBiZWhhdmlvdXIgaXMgYSBsaXR0bGUgbW9yZSBkaWZmZXJlbnQgdG8gc3RhbmRhcmQgSURCLiBJblxuICAgIC8vIElEQiwgeW91IGFkdmFuY2UgdGhlIGN1cnNvciBhbmQgd2FpdCBmb3IgYSBuZXcgJ3N1Y2Nlc3MnIG9uIHRoZSBJREJSZXF1ZXN0IHRoYXQgZ2F2ZSB5b3UgdGhlXG4gICAgLy8gY3Vyc29yLiBJdCdzIGtpbmRhIGxpa2UgYSBwcm9taXNlIHRoYXQgY2FuIHJlc29sdmUgd2l0aCBtYW55IHZhbHVlcy4gVGhhdCBkb2Vzbid0IG1ha2Ugc2Vuc2VcbiAgICAvLyB3aXRoIHJlYWwgcHJvbWlzZXMsIHNvIGVhY2ggYWR2YW5jZSBtZXRob2RzIHJldHVybnMgYSBuZXcgcHJvbWlzZSBmb3IgdGhlIGN1cnNvciBvYmplY3QsIG9yXG4gICAgLy8gdW5kZWZpbmVkIGlmIHRoZSBlbmQgb2YgdGhlIGN1cnNvciBoYXMgYmVlbiByZWFjaGVkLlxuICAgIGlmIChnZXRDdXJzb3JBZHZhbmNlTWV0aG9kcygpLmluY2x1ZGVzKGZ1bmMpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgLy8gQ2FsbGluZyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJveHkgYXMgJ3RoaXMnIGNhdXNlcyBJTExFR0FMIElOVk9DQVRJT04sIHNvIHdlIHVzZVxuICAgICAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgICAgIGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKTtcbiAgICAgICAgICAgIHJldHVybiB3cmFwKHRoaXMucmVxdWVzdCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXG4gICAgICAgIC8vIHRoZSBvcmlnaW5hbCBvYmplY3QuXG4gICAgICAgIHJldHVybiB3cmFwKGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybUNhY2hhYmxlVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gd3JhcEZ1bmN0aW9uKHZhbHVlKTtcbiAgICAvLyBUaGlzIGRvZXNuJ3QgcmV0dXJuLCBpdCBqdXN0IGNyZWF0ZXMgYSAnZG9uZScgcHJvbWlzZSBmb3IgdGhlIHRyYW5zYWN0aW9uLFxuICAgIC8vIHdoaWNoIGlzIGxhdGVyIHJldHVybmVkIGZvciB0cmFuc2FjdGlvbi5kb25lIChzZWUgaWRiT2JqZWN0SGFuZGxlcikuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24pXG4gICAgICAgIGNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbih2YWx1ZSk7XG4gICAgaWYgKGluc3RhbmNlT2ZBbnkodmFsdWUsIGdldElkYlByb3h5YWJsZVR5cGVzKCkpKVxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHZhbHVlLCBpZGJQcm94eVRyYXBzKTtcbiAgICAvLyBSZXR1cm4gdGhlIHNhbWUgdmFsdWUgYmFjayBpZiB3ZSdyZSBub3QgZ29pbmcgdG8gdHJhbnNmb3JtIGl0LlxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHdyYXAodmFsdWUpIHtcbiAgICAvLyBXZSBzb21ldGltZXMgZ2VuZXJhdGUgbXVsdGlwbGUgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0IChlZyB3aGVuIGN1cnNvcmluZyksIGJlY2F1c2VcbiAgICAvLyBJREIgaXMgd2VpcmQgYW5kIGEgc2luZ2xlIElEQlJlcXVlc3QgY2FuIHlpZWxkIG1hbnkgcmVzcG9uc2VzLCBzbyB0aGVzZSBjYW4ndCBiZSBjYWNoZWQuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCUmVxdWVzdClcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3QodmFsdWUpO1xuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgdHJhbnNmb3JtZWQgdGhpcyB2YWx1ZSBiZWZvcmUsIHJldXNlIHRoZSB0cmFuc2Zvcm1lZCB2YWx1ZS5cbiAgICAvLyBUaGlzIGlzIGZhc3RlciwgYnV0IGl0IGFsc28gcHJvdmlkZXMgb2JqZWN0IGVxdWFsaXR5LlxuICAgIGlmICh0cmFuc2Zvcm1DYWNoZS5oYXModmFsdWUpKVxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtQ2FjaGUuZ2V0KHZhbHVlKTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHRyYW5zZm9ybUNhY2hhYmxlVmFsdWUodmFsdWUpO1xuICAgIC8vIE5vdCBhbGwgdHlwZXMgYXJlIHRyYW5zZm9ybWVkLlxuICAgIC8vIFRoZXNlIG1heSBiZSBwcmltaXRpdmUgdHlwZXMsIHNvIHRoZXkgY2FuJ3QgYmUgV2Vha01hcCBrZXlzLlxuICAgIGlmIChuZXdWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgdHJhbnNmb3JtQ2FjaGUuc2V0KHZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQobmV3VmFsdWUsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xufVxuY29uc3QgdW53cmFwID0gKHZhbHVlKSA9PiByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuZ2V0KHZhbHVlKTtcblxuLyoqXG4gKiBPcGVuIGEgZGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXG4gKiBAcGFyYW0gdmVyc2lvbiBTY2hlbWEgdmVyc2lvbi5cbiAqIEBwYXJhbSBjYWxsYmFja3MgQWRkaXRpb25hbCBjYWxsYmFja3MuXG4gKi9cbmZ1bmN0aW9uIG9wZW5EQihuYW1lLCB2ZXJzaW9uLCB7IGJsb2NrZWQsIHVwZ3JhZGUsIGJsb2NraW5nLCB0ZXJtaW5hdGVkIH0gPSB7fSkge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihuYW1lLCB2ZXJzaW9uKTtcbiAgICBjb25zdCBvcGVuUHJvbWlzZSA9IHdyYXAocmVxdWVzdCk7XG4gICAgaWYgKHVwZ3JhZGUpIHtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCd1cGdyYWRlbmVlZGVkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB1cGdyYWRlKHdyYXAocmVxdWVzdC5yZXN1bHQpLCBldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCB3cmFwKHJlcXVlc3QudHJhbnNhY3Rpb24pLCBldmVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoYmxvY2tlZCkge1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoZXZlbnQpID0+IGJsb2NrZWQoXG4gICAgICAgIC8vIENhc3RpbmcgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC1ET00tbGliLWdlbmVyYXRvci9wdWxsLzE0MDVcbiAgICAgICAgZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgZXZlbnQpKTtcbiAgICB9XG4gICAgb3BlblByb21pc2VcbiAgICAgICAgLnRoZW4oKGRiKSA9PiB7XG4gICAgICAgIGlmICh0ZXJtaW5hdGVkKVxuICAgICAgICAgICAgZGIuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAoKSA9PiB0ZXJtaW5hdGVkKCkpO1xuICAgICAgICBpZiAoYmxvY2tpbmcpIHtcbiAgICAgICAgICAgIGRiLmFkZEV2ZW50TGlzdGVuZXIoJ3ZlcnNpb25jaGFuZ2UnLCAoZXZlbnQpID0+IGJsb2NraW5nKGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50Lm5ld1ZlcnNpb24sIGV2ZW50KSk7XG4gICAgICAgIH1cbiAgICB9KVxuICAgICAgICAuY2F0Y2goKCkgPT4geyB9KTtcbiAgICByZXR1cm4gb3BlblByb21pc2U7XG59XG4vKipcbiAqIERlbGV0ZSBhIGRhdGFiYXNlLlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGRhdGFiYXNlLlxuICovXG5mdW5jdGlvbiBkZWxldGVEQihuYW1lLCB7IGJsb2NrZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShuYW1lKTtcbiAgICBpZiAoYmxvY2tlZCkge1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoZXZlbnQpID0+IGJsb2NrZWQoXG4gICAgICAgIC8vIENhc3RpbmcgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC1ET00tbGliLWdlbmVyYXRvci9wdWxsLzE0MDVcbiAgICAgICAgZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyYXAocmVxdWVzdCkudGhlbigoKSA9PiB1bmRlZmluZWQpO1xufVxuXG5jb25zdCByZWFkTWV0aG9kcyA9IFsnZ2V0JywgJ2dldEtleScsICdnZXRBbGwnLCAnZ2V0QWxsS2V5cycsICdjb3VudCddO1xuY29uc3Qgd3JpdGVNZXRob2RzID0gWydwdXQnLCAnYWRkJywgJ2RlbGV0ZScsICdjbGVhciddO1xuY29uc3QgY2FjaGVkTWV0aG9kcyA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHtcbiAgICBpZiAoISh0YXJnZXQgaW5zdGFuY2VvZiBJREJEYXRhYmFzZSAmJlxuICAgICAgICAhKHByb3AgaW4gdGFyZ2V0KSAmJlxuICAgICAgICB0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhY2hlZE1ldGhvZHMuZ2V0KHByb3ApKVxuICAgICAgICByZXR1cm4gY2FjaGVkTWV0aG9kcy5nZXQocHJvcCk7XG4gICAgY29uc3QgdGFyZ2V0RnVuY05hbWUgPSBwcm9wLnJlcGxhY2UoL0Zyb21JbmRleCQvLCAnJyk7XG4gICAgY29uc3QgdXNlSW5kZXggPSBwcm9wICE9PSB0YXJnZXRGdW5jTmFtZTtcbiAgICBjb25zdCBpc1dyaXRlID0gd3JpdGVNZXRob2RzLmluY2x1ZGVzKHRhcmdldEZ1bmNOYW1lKTtcbiAgICBpZiAoXG4gICAgLy8gQmFpbCBpZiB0aGUgdGFyZ2V0IGRvZXNuJ3QgZXhpc3Qgb24gdGhlIHRhcmdldC4gRWcsIGdldEFsbCBpc24ndCBpbiBFZGdlLlxuICAgICEodGFyZ2V0RnVuY05hbWUgaW4gKHVzZUluZGV4ID8gSURCSW5kZXggOiBJREJPYmplY3RTdG9yZSkucHJvdG90eXBlKSB8fFxuICAgICAgICAhKGlzV3JpdGUgfHwgcmVhZE1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZCA9IGFzeW5jIGZ1bmN0aW9uIChzdG9yZU5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgLy8gaXNXcml0ZSA/ICdyZWFkd3JpdGUnIDogdW5kZWZpbmVkIGd6aXBwcyBiZXR0ZXIsIGJ1dCBmYWlscyBpbiBFZGdlIDooXG4gICAgICAgIGNvbnN0IHR4ID0gdGhpcy50cmFuc2FjdGlvbihzdG9yZU5hbWUsIGlzV3JpdGUgPyAncmVhZHdyaXRlJyA6ICdyZWFkb25seScpO1xuICAgICAgICBsZXQgdGFyZ2V0ID0gdHguc3RvcmU7XG4gICAgICAgIGlmICh1c2VJbmRleClcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5pbmRleChhcmdzLnNoaWZ0KCkpO1xuICAgICAgICAvLyBNdXN0IHJlamVjdCBpZiBvcCByZWplY3RzLlxuICAgICAgICAvLyBJZiBpdCdzIGEgd3JpdGUgb3BlcmF0aW9uLCBtdXN0IHJlamVjdCBpZiB0eC5kb25lIHJlamVjdHMuXG4gICAgICAgIC8vIE11c3QgcmVqZWN0IHdpdGggb3AgcmVqZWN0aW9uIGZpcnN0LlxuICAgICAgICAvLyBNdXN0IHJlc29sdmUgd2l0aCBvcCB2YWx1ZS5cbiAgICAgICAgLy8gTXVzdCBoYW5kbGUgYm90aCBwcm9taXNlcyAobm8gdW5oYW5kbGVkIHJlamVjdGlvbnMpXG4gICAgICAgIHJldHVybiAoYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgdGFyZ2V0W3RhcmdldEZ1bmNOYW1lXSguLi5hcmdzKSxcbiAgICAgICAgICAgIGlzV3JpdGUgJiYgdHguZG9uZSxcbiAgICAgICAgXSkpWzBdO1xuICAgIH07XG4gICAgY2FjaGVkTWV0aG9kcy5zZXQocHJvcCwgbWV0aG9kKTtcbiAgICByZXR1cm4gbWV0aG9kO1xufVxucmVwbGFjZVRyYXBzKChvbGRUcmFwcykgPT4gKHtcbiAgICAuLi5vbGRUcmFwcyxcbiAgICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PiBnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB8fCBvbGRUcmFwcy5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlciksXG4gICAgaGFzOiAodGFyZ2V0LCBwcm9wKSA9PiAhIWdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmhhcyh0YXJnZXQsIHByb3ApLFxufSkpO1xuXG5jb25zdCBhZHZhbmNlTWV0aG9kUHJvcHMgPSBbJ2NvbnRpbnVlJywgJ2NvbnRpbnVlUHJpbWFyeUtleScsICdhZHZhbmNlJ107XG5jb25zdCBtZXRob2RNYXAgPSB7fTtcbmNvbnN0IGFkdmFuY2VSZXN1bHRzID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IGl0dHJQcm94aWVkQ3Vyc29yVG9PcmlnaW5hbFByb3h5ID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IGN1cnNvckl0ZXJhdG9yVHJhcHMgPSB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCkge1xuICAgICAgICBpZiAoIWFkdmFuY2VNZXRob2RQcm9wcy5pbmNsdWRlcyhwcm9wKSlcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRbcHJvcF07XG4gICAgICAgIGxldCBjYWNoZWRGdW5jID0gbWV0aG9kTWFwW3Byb3BdO1xuICAgICAgICBpZiAoIWNhY2hlZEZ1bmMpIHtcbiAgICAgICAgICAgIGNhY2hlZEZ1bmMgPSBtZXRob2RNYXBbcHJvcF0gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgICAgIGFkdmFuY2VSZXN1bHRzLnNldCh0aGlzLCBpdHRyUHJveGllZEN1cnNvclRvT3JpZ2luYWxQcm94eS5nZXQodGhpcylbcHJvcF0oLi4uYXJncykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGVkRnVuYztcbiAgICB9LFxufTtcbmFzeW5jIGZ1bmN0aW9uKiBpdGVyYXRlKC4uLmFyZ3MpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdGhpcy1hc3NpZ25tZW50XG4gICAgbGV0IGN1cnNvciA9IHRoaXM7XG4gICAgaWYgKCEoY3Vyc29yIGluc3RhbmNlb2YgSURCQ3Vyc29yKSkge1xuICAgICAgICBjdXJzb3IgPSBhd2FpdCBjdXJzb3Iub3BlbkN1cnNvciguLi5hcmdzKTtcbiAgICB9XG4gICAgaWYgKCFjdXJzb3IpXG4gICAgICAgIHJldHVybjtcbiAgICBjdXJzb3IgPSBjdXJzb3I7XG4gICAgY29uc3QgcHJveGllZEN1cnNvciA9IG5ldyBQcm94eShjdXJzb3IsIGN1cnNvckl0ZXJhdG9yVHJhcHMpO1xuICAgIGl0dHJQcm94aWVkQ3Vyc29yVG9PcmlnaW5hbFByb3h5LnNldChwcm94aWVkQ3Vyc29yLCBjdXJzb3IpO1xuICAgIC8vIE1hcCB0aGlzIGRvdWJsZS1wcm94eSBiYWNrIHRvIHRoZSBvcmlnaW5hbCwgc28gb3RoZXIgY3Vyc29yIG1ldGhvZHMgd29yay5cbiAgICByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuc2V0KHByb3hpZWRDdXJzb3IsIHVud3JhcChjdXJzb3IpKTtcbiAgICB3aGlsZSAoY3Vyc29yKSB7XG4gICAgICAgIHlpZWxkIHByb3hpZWRDdXJzb3I7XG4gICAgICAgIC8vIElmIG9uZSBvZiB0aGUgYWR2YW5jaW5nIG1ldGhvZHMgd2FzIG5vdCBjYWxsZWQsIGNhbGwgY29udGludWUoKS5cbiAgICAgICAgY3Vyc29yID0gYXdhaXQgKGFkdmFuY2VSZXN1bHRzLmdldChwcm94aWVkQ3Vyc29yKSB8fCBjdXJzb3IuY29udGludWUoKSk7XG4gICAgICAgIGFkdmFuY2VSZXN1bHRzLmRlbGV0ZShwcm94aWVkQ3Vyc29yKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc0l0ZXJhdG9yUHJvcCh0YXJnZXQsIHByb3ApIHtcbiAgICByZXR1cm4gKChwcm9wID09PSBTeW1ib2wuYXN5bmNJdGVyYXRvciAmJlxuICAgICAgICBpbnN0YW5jZU9mQW55KHRhcmdldCwgW0lEQkluZGV4LCBJREJPYmplY3RTdG9yZSwgSURCQ3Vyc29yXSkpIHx8XG4gICAgICAgIChwcm9wID09PSAnaXRlcmF0ZScgJiYgaW5zdGFuY2VPZkFueSh0YXJnZXQsIFtJREJJbmRleCwgSURCT2JqZWN0U3RvcmVdKSkpO1xufVxucmVwbGFjZVRyYXBzKChvbGRUcmFwcykgPT4gKHtcbiAgICAuLi5vbGRUcmFwcyxcbiAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICBpZiAoaXNJdGVyYXRvclByb3AodGFyZ2V0LCBwcm9wKSlcbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRlO1xuICAgICAgICByZXR1cm4gb2xkVHJhcHMuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgIH0sXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xuICAgICAgICByZXR1cm4gaXNJdGVyYXRvclByb3AodGFyZ2V0LCBwcm9wKSB8fCBvbGRUcmFwcy5oYXModGFyZ2V0LCBwcm9wKTtcbiAgICB9LFxufSkpO1xuXG5leHBvcnQgeyBkZWxldGVEQiwgb3BlbkRCLCB1bndyYXAsIHdyYXAgfTtcbiIsImltcG9ydCB7IG9wZW5EQiB9IGZyb20gXCJpZGJcIjtcblxuY29uc3QgREJfTkFNRSA9IFwiamF0ZVwiO1xuY29uc3QgREJfVkVSU0lPTiA9IDE7XG5jb25zdCBPQkpFQ1RfU1RPUkVfTkFNRSA9IFwiamF0ZVwiO1xuXG5jb25zdCBpbml0ZGIgPSBhc3luYyAoKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgZGIgPSBhd2FpdCBvcGVuREIoREJfTkFNRSwgREJfVkVSU0lPTiwge1xuICAgICAgdXBncmFkZShkYikge1xuICAgICAgICBpZiAoIWRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoT0JKRUNUX1NUT1JFX05BTUUpKSB7XG4gICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoT0JKRUNUX1NUT1JFX05BTUUsIHsga2V5UGF0aDogXCJpZFwiLCBhdXRvSW5jcmVtZW50OiB0cnVlIH0pO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGAke09CSkVDVF9TVE9SRV9OQU1FfSBvYmplY3Qgc3RvcmUgY3JlYXRlZGApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKGAke0RCX05BTUV9IGRhdGFiYXNlIGluaXRpYWxpemVkYCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluaXRpYWxpemluZyB0aGUgZGF0YWJhc2VcIiwgZXJyb3IpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcHV0RGIgPSBhc3luYyAoY29udGVudCkgPT4ge1xuICBjb25zb2xlLmxvZyhcIlBVVCB0byB0aGUgZGF0YWJhc2VcIik7XG4gIHRyeSB7XG4gICAgY29uc3QgZGIgPSBhd2FpdCBvcGVuREIoREJfTkFNRSwgREJfVkVSU0lPTik7XG4gICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbihPQkpFQ1RfU1RPUkVfTkFNRSwgXCJyZWFkd3JpdGVcIik7XG4gICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZShPQkpFQ1RfU1RPUkVfTkFNRSk7XG4gICAgY29uc3QgcmVxdWVzdCA9IHN0b3JlLnB1dCh7IGlkOiAxLCBjb250ZW50IH0pO1xuICAgIGF3YWl0IHJlcXVlc3Q7XG4gICAgY29uc29sZS5sb2coXCJEYXRhIHNhdmVkIHRvIHRoZSBkYXRhYmFzZVwiKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igc2F2aW5nIGRhdGEgdG8gdGhlIGRhdGFiYXNlXCIsIGVycm9yKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGdldERiID0gYXN5bmMgKCkgPT4ge1xuICBjb25zb2xlLmxvZyhcIkdFVCBhbGwgZnJvbSB0aGUgZGF0YWJhc2VcIik7XG4gIHRyeSB7XG4gICAgY29uc3QgZGIgPSBhd2FpdCBvcGVuREIoREJfTkFNRSwgREJfVkVSU0lPTik7XG4gICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbihPQkpFQ1RfU1RPUkVfTkFNRSwgXCJyZWFkb25seVwiKTtcbiAgICBjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKE9CSkVDVF9TVE9SRV9OQU1FKTtcbiAgICBjb25zdCByZXF1ZXN0ID0gc3RvcmUuZ2V0QWxsKCk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVxdWVzdDtcbiAgICBjb25zb2xlLmxvZyhcIkRhdGEgcmV0cmlldmVkIGZyb20gdGhlIGRhdGFiYXNlXCIsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPiAwID8gcmVzdWx0WzBdLmNvbnRlbnQgOiBudWxsO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciByZXRyaWV2aW5nIGRhdGEgZnJvbSB0aGUgZGF0YWJhc2VcIiwgZXJyb3IpO1xuICB9XG59O1xuXG4vLyBJbml0aWFsaXplIGRhdGFiYXNlIGFuZCB0ZXN0XG5pbml0ZGIoKS50aGVuKCgpID0+IHtcbiAgcHV0RGIoXCJUZXN0IGNvbnRlbnRcIikudGhlbigoKSA9PiB7XG4gICAgZ2V0RGIoKTtcbiAgfSk7XG59KTsiLCIvLyAvLyBJbXBvcnQgbWV0aG9kcyB0byBzYXZlIGFuZCBnZXQgZGF0YSBmcm9tIHRoZSBpbmRleGVkREIgZGF0YWJhc2UgaW4gJy4vZGF0YWJhc2UuanMnXG4vLyBpbXBvcnQgeyBpbml0ZGIsIGdldERiLCBwdXREYiB9IGZyb20gJy4vZGF0YWJhc2UnO1xuLy8gaW1wb3J0IHsgaGVhZGVyIH0gZnJvbSAnLi9oZWFkZXInO1xuXG4vLyBleHBvcnQgZGVmYXVsdCBjbGFzcyB7XG4vLyAgIGNvbnN0cnVjdG9yKCkge1xuLy8gICAgIGNvbnN0IGxvY2FsRGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjb250ZW50Jyk7XG5cbi8vICAgICAvLyBjaGVjayBpZiBDb2RlTWlycm9yIGlzIGxvYWRlZFxuLy8gICAgIGlmICh0eXBlb2YgQ29kZU1pcnJvciA9PT0gJ3VuZGVmaW5lZCcpIHtcbi8vICAgICAgIHRocm93IG5ldyBFcnJvcignQ29kZU1pcnJvciBpcyBub3QgbG9hZGVkJyk7XG4vLyAgICAgfVxuXG4vLyAgICAgdGhpcy5lZGl0b3IgPSBDb2RlTWlycm9yKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYWluJyksIHtcbi8vICAgICAgIHZhbHVlOiAnJyxcbi8vICAgICAgIG1vZGU6ICdqYXZhc2NyaXB0Jyxcbi8vICAgICAgIHRoZW1lOiAnbW9ub2thaScsXG4vLyAgICAgICBsaW5lTnVtYmVyczogdHJ1ZSxcbi8vICAgICAgIGxpbmVXcmFwcGluZzogdHJ1ZSxcbi8vICAgICAgIGF1dG9mb2N1czogdHJ1ZSxcbi8vICAgICAgIGluZGVudFVuaXQ6IDIsXG4vLyAgICAgICB0YWJTaXplOiAyLFxuLy8gICAgIH0pO1xuXG4vLyAgICAgLy8gV2hlbiB0aGUgZWRpdG9yIGlzIHJlYWR5LCBzZXQgdGhlIHZhbHVlIHRvIHdoYXRldmVyIGlzIHN0b3JlZCBpbiBpbmRleGVkZGIuXG4vLyAgICAgLy8gRmFsbCBiYWNrIHRvIGxvY2FsU3RvcmFnZSBpZiBub3RoaW5nIGlzIHN0b3JlZCBpbiBpbmRleGVkZGIsIGFuZCBpZiBuZWl0aGVyIGlzIGF2YWlsYWJsZSwgc2V0IHRoZSB2YWx1ZSB0byBoZWFkZXIuXG4vLyAgICAgZ2V0RGIoKS50aGVuKChkYXRhKSA9PiB7XG4vLyAgICAgICBjb25zb2xlLmluZm8oJ0xvYWRlZCBkYXRhIGZyb20gSW5kZXhlZERCLCBpbmplY3RpbmcgaW50byBlZGl0b3InKTtcbi8vICAgICAgIHRoaXMuZWRpdG9yLnNldFZhbHVlKGRhdGEgfHwgbG9jYWxEYXRhIHx8IGhlYWRlcik7XG4vLyAgICAgfSk7XG5cbi8vICAgICB0aGlzLmVkaXRvci5vbignY2hhbmdlJywgKCkgPT4ge1xuLy8gICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2NvbnRlbnQnLCB0aGlzLmVkaXRvci5nZXRWYWx1ZSgpKTtcbi8vICAgICB9KTtcblxuLy8gICAgIC8vIFNhdmUgdGhlIGNvbnRlbnQgb2YgdGhlIGVkaXRvciB3aGVuIHRoZSBlZGl0b3IgaXRzZWxmIGlzIGxvc2VzIGZvY3VzXG4vLyAgICAgdGhpcy5lZGl0b3Iub24oJ2JsdXInLCAoKSA9PiB7XG4vLyAgICAgICBjb25zb2xlLmxvZygnVGhlIGVkaXRvciBoYXMgbG9zdCBmb2N1cycpO1xuLy8gICAgICAgcHV0RGIobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2NvbnRlbnQnKSk7XG4vLyAgICAgfSk7XG4vLyAgIH1cbi8vIH1cblxuLy8gSW1wb3J0IG1ldGhvZHMgdG8gc2F2ZSBhbmQgZ2V0IGRhdGEgZnJvbSB0aGUgaW5kZXhlZERCIGRhdGFiYXNlIGluICcuL2RhdGFiYXNlLmpzJ1xuaW1wb3J0IHsgaW5pdGRiLCBnZXREYiwgcHV0RGIgfSBmcm9tICcuL2RhdGFiYXNlJztcbmltcG9ydCB7IGhlYWRlciB9IGZyb20gJy4vaGVhZGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBsb2NhbERhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY29udGVudCcpO1xuXG4gICAgLy8gY2hlY2sgaWYgQ29kZU1pcnJvciBpcyBsb2FkZWRcbiAgICBpZiAodHlwZW9mIENvZGVNaXJyb3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvZGVNaXJyb3IgaXMgbm90IGxvYWRlZCcpO1xuICAgIH1cblxuICAgIHRoaXMuZWRpdG9yID0gQ29kZU1pcnJvcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWFpbicpLCB7XG4gICAgICB2YWx1ZTogJycsXG4gICAgICBtb2RlOiAnamF2YXNjcmlwdCcsXG4gICAgICB0aGVtZTogJ21vbm9rYWknLFxuICAgICAgbGluZU51bWJlcnM6IHRydWUsXG4gICAgICBsaW5lV3JhcHBpbmc6IHRydWUsXG4gICAgICBhdXRvZm9jdXM6IHRydWUsXG4gICAgICBpbmRlbnRVbml0OiAyLFxuICAgICAgdGFiU2l6ZTogMixcbiAgICB9KTtcblxuICAgIC8vIEluaXRpYWxpemUgSW5kZXhlZERCXG4gICAgaW5pdGRiKCk7XG5cbiAgICAvLyBXaGVuIHRoZSBlZGl0b3IgaXMgcmVhZHksIHNldCB0aGUgdmFsdWUgdG8gd2hhdGV2ZXIgaXMgc3RvcmVkIGluIEluZGV4ZWREQi5cbiAgICAvLyBGYWxsIGJhY2sgdG8gbG9jYWxTdG9yYWdlIGlmIG5vdGhpbmcgaXMgc3RvcmVkIGluIEluZGV4ZWREQiwgYW5kIGlmIG5laXRoZXIgaXMgYXZhaWxhYmxlLCBzZXQgdGhlIHZhbHVlIHRvIGhlYWRlci5cbiAgICBnZXREYigpLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgIGNvbnNvbGUuaW5mbygnTG9hZGVkIGRhdGEgZnJvbSBJbmRleGVkREIsIGluamVjdGluZyBpbnRvIGVkaXRvcicpO1xuICAgICAgdGhpcy5lZGl0b3Iuc2V0VmFsdWUoZGF0YSB8fCBsb2NhbERhdGEgfHwgaGVhZGVyKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZWRpdG9yLm9uKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnY29udGVudCcsIHRoaXMuZWRpdG9yLmdldFZhbHVlKCkpO1xuICAgIH0pO1xuXG4gICAgLy8gU2F2ZSB0aGUgY29udGVudCBvZiB0aGUgZWRpdG9yIHdoZW4gdGhlIGVkaXRvciBpdHNlbGYgbG9zZXMgZm9jdXNcbiAgICB0aGlzLmVkaXRvci5vbignYmx1cicsICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdUaGUgZWRpdG9yIGhhcyBsb3N0IGZvY3VzJyk7XG4gICAgICBwdXREYihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY29udGVudCcpKTtcbiAgICB9KTtcbiAgfVxufVxuXG5cbiIsIi8vIHNyYy9qcy9pbmRleC5qc1xuXG5pbXBvcnQgeyBXb3JrYm94IH0gZnJvbSAnd29ya2JveC13aW5kb3cnO1xuaW1wb3J0IEVkaXRvciBmcm9tICcuL2VkaXRvcic7XG5pbXBvcnQgJy4uL2Nzcy9zdHlsZS5jc3MnO1xuXG5jb25zdCBtYWluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21haW4nKTtcbm1haW4uaW5uZXJIVE1MID0gJyc7XG5cbmNvbnN0IGxvYWRTcGlubmVyID0gKCkgPT4ge1xuICBjb25zdCBzcGlubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHNwaW5uZXIuY2xhc3NMaXN0LmFkZCgnc3Bpbm5lcicpO1xuICBzcGlubmVyLmlubmVySFRNTCA9IGBcbiAgPGRpdiBjbGFzcz1cImxvYWRpbmctY29udGFpbmVyXCI+XG4gICAgPGRpdiBjbGFzcz1cImxvYWRpbmctc3Bpbm5lclwiPjwvZGl2PlxuICA8L2Rpdj5cbiAgYDtcbiAgbWFpbi5hcHBlbmRDaGlsZChzcGlubmVyKTtcbn07XG5cbmNvbnN0IGVkaXRvciA9IG5ldyBFZGl0b3IoKTtcbmlmICh0eXBlb2YgZWRpdG9yID09PSAndW5kZWZpbmVkJykge1xuICBsb2FkU3Bpbm5lcigpO1xufVxuXG4vLyBDaGVjayBpZiBzZXJ2aWNlIHdvcmtlcnMgYXJlIHN1cHBvcnRlZFxuaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHtcbiAgLy8gUmVnaXN0ZXIgd29ya2JveCBzZXJ2aWNlIHdvcmtlciBmcm9tIHRoZSByb290IHBhdGhcbiAgY29uc3Qgd29ya2JveFNXID0gbmV3IFdvcmtib3goJy9zZXJ2aWNlLXdvcmtlci5qcycpOyAvLyBFbnN1cmUgdGhpcyBwYXRoIG1hdGNoZXMgeW91ciBzZXJ2aWNlIHdvcmtlciBvdXRwdXRcbiAgd29ya2JveFNXLnJlZ2lzdGVyKCk7XG59IGVsc2Uge1xuICBjb25zb2xlLmVycm9yKCdTZXJ2aWNlIHdvcmtlcnMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyLicpO1xufVxuXG4vLyBpZiAoJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvcikge1xuLy8gICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcbi8vICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcignL3NlcnZpY2Utd29ya2VyLmpzJylcbi8vICAgICAgIC50aGVuKChyZWdpc3RyYXRpb24pID0+IHtcbi8vICAgICAgICAgY29uc29sZS5sb2coJ1NlcnZpY2UgV29ya2VyIHJlZ2lzdGVyZWQgd2l0aCBzY29wZTonLCByZWdpc3RyYXRpb24uc2NvcGUpO1xuLy8gICAgICAgfSlcbi8vICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbi8vICAgICAgICAgY29uc29sZS5lcnJvcignU2VydmljZSBXb3JrZXIgcmVnaXN0cmF0aW9uIGZhaWxlZDonLCBlcnJvcik7XG4vLyAgICAgICB9KTtcbi8vICAgfSk7XG4vLyB9XG4iLCJjb25zdCBoZWFkZXIgPSBgXG4vKlxuICAgICAgIF9fX19fICBfX19fX19fX19fX19cbiAgICAgIC8gLyAgIHwvXyAgX18vIF9fX18vXG4gX18gIC8gLyAvfCB8IC8gLyAvIF9fLyAgIFxuLyAvXy8gLyBfX18gfC8gLyAvIC9fX18gICBcbiBfX19fL18vICB8Xy9fLyAvX19fX18vICAgXG5qdXN0IGFub3RoZXIgdGV4dCBlZGl0b3JcbiovICAgICAgICAgICAgICAgICAgICAgICAgICBcbmA7XG5cbmV4cG9ydCB7IGhlYWRlciB9O1xuIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInNlbGYiLCJfIiwibiIsInQiLCJQcm9taXNlIiwiciIsImUiLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQxIiwib25tZXNzYWdlIiwiZGF0YSIsInBvc3RNZXNzYWdlIiwicG9ydDIiLCJ0b1ByaW1pdGl2ZSIsIlR5cGVFcnJvciIsIlN0cmluZyIsImxlbmd0aCIsImkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInNldFByb3RvdHlwZU9mIiwiYmluZCIsIl9fcHJvdG9fXyIsIkFycmF5IiwidSIsInRoaXMiLCJwcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImEiLCJsb2NhdGlvbiIsImhyZWYiLCJVUkwiLCJjIiwidHlwZSIsImFzc2lnbiIsImYiLCJ0aGVuIiwicyIsInYiLCJoIiwibCIsIm5uIiwidG4iLCJybiIsImVuIiwib24iLCJ1biIsImFuIiwiU2V0IiwiY24iLCJmbiIsImluc3RhbGxpbmciLCJzY3JpcHRVUkwiLCJzbiIsInRvU3RyaW5nIiwicGVyZm9ybWFuY2UiLCJub3ciLCJ2biIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJobiIsImFkZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJsbiIsInRhcmdldCIsInN0YXRlIiwic3ciLCJpc0V4dGVybmFsIiwib3JpZ2luYWxFdmVudCIsIm1uIiwiaXNVcGRhdGUiLCJkaXNwYXRjaEV2ZW50Iiwid24iLCJzZXRUaW1lb3V0Iiwid2FpdGluZyIsImNsZWFyVGltZW91dCIsInluIiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsImNvbnRyb2xsZXIiLCJnbiIsInBvcnRzIiwic291cmNlIiwiZ2V0U1ciLCJoYXMiLCJhcmd1bWVudHMiLCJhcHBseSIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwibSIsInkiLCJyZWdpc3RlciIsImltbWVkaWF0ZSIsImRvY3VtZW50IiwicmVhZHlTdGF0ZSIsIndpbmRvdyIsIkJvb2xlYW4iLCJkbiIsInBuIiwiYm4iLCJvbmNlIiwid2FzV2FpdGluZ0JlZm9yZVJlZ2lzdGVyIiwidXBkYXRlIiwibWVzc2FnZVNXIiwibWVzc2FnZVNraXBXYWl0aW5nIiwiUG4iLCJNYXAiLCJqbiIsImRlbGV0ZSIsIml0ZXJhdG9yIiwibmV4dCIsImlzQXJyYXkiLCJzbGljZSIsIm5hbWUiLCJmcm9tIiwidGVzdCIsImRvbmUiLCJzZXQiLCJpbnN0YW5jZU9mQW55Iiwib2JqZWN0IiwiY29uc3RydWN0b3JzIiwic29tZSIsImlkYlByb3h5YWJsZVR5cGVzIiwiY3Vyc29yQWR2YW5jZU1ldGhvZHMiLCJ0cmFuc2FjdGlvbkRvbmVNYXAiLCJXZWFrTWFwIiwidHJhbnNmb3JtQ2FjaGUiLCJyZXZlcnNlVHJhbnNmb3JtQ2FjaGUiLCJpZGJQcm94eVRyYXBzIiwicmVjZWl2ZXIiLCJJREJUcmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlTmFtZXMiLCJ1bmRlZmluZWQiLCJvYmplY3RTdG9yZSIsIndyYXAiLCJyZXBsYWNlVHJhcHMiLCJjYWxsYmFjayIsInRyYW5zZm9ybUNhY2hhYmxlVmFsdWUiLCJmdW5jIiwiSURCQ3Vyc29yIiwiYWR2YW5jZSIsImNvbnRpbnVlIiwiY29udGludWVQcmltYXJ5S2V5IiwiaW5jbHVkZXMiLCJhcmdzIiwidW53cmFwIiwicmVxdWVzdCIsInR4IiwidW5saXN0ZW4iLCJjb21wbGV0ZSIsImVycm9yIiwiRE9NRXhjZXB0aW9uIiwiY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uIiwiSURCRGF0YWJhc2UiLCJJREJPYmplY3RTdG9yZSIsIklEQkluZGV4IiwiUHJveHkiLCJJREJSZXF1ZXN0Iiwic3VjY2VzcyIsInJlc3VsdCIsInByb21pc2lmeVJlcXVlc3QiLCJuZXdWYWx1ZSIsIm9wZW5EQiIsInZlcnNpb24iLCJibG9ja2VkIiwidXBncmFkZSIsImJsb2NraW5nIiwidGVybWluYXRlZCIsImluZGV4ZWREQiIsIm9wZW4iLCJvcGVuUHJvbWlzZSIsImV2ZW50Iiwib2xkVmVyc2lvbiIsIm5ld1ZlcnNpb24iLCJ0cmFuc2FjdGlvbiIsImRiIiwiY2F0Y2giLCJyZWFkTWV0aG9kcyIsIndyaXRlTWV0aG9kcyIsImNhY2hlZE1ldGhvZHMiLCJnZXRNZXRob2QiLCJ0YXJnZXRGdW5jTmFtZSIsInJlcGxhY2UiLCJ1c2VJbmRleCIsImlzV3JpdGUiLCJtZXRob2QiLCJhc3luYyIsInN0b3JlTmFtZSIsInN0b3JlIiwiaW5kZXgiLCJzaGlmdCIsImFsbCIsIm9sZFRyYXBzIiwiYWR2YW5jZU1ldGhvZFByb3BzIiwibWV0aG9kTWFwIiwiYWR2YW5jZVJlc3VsdHMiLCJpdHRyUHJveGllZEN1cnNvclRvT3JpZ2luYWxQcm94eSIsImN1cnNvckl0ZXJhdG9yVHJhcHMiLCJjYWNoZWRGdW5jIiwiaXRlcmF0ZSIsImN1cnNvciIsIm9wZW5DdXJzb3IiLCJwcm94aWVkQ3Vyc29yIiwiaXNJdGVyYXRvclByb3AiLCJhc3luY0l0ZXJhdG9yIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsImRlZmluZSIsIkdlbmVyYXRvciIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJhcmciLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwicCIsImQiLCJnZXRQcm90b3R5cGVPZiIsInZhbHVlcyIsImciLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiX2ludm9rZSIsIkFzeW5jSXRlcmF0b3IiLCJpbnZva2UiLCJfdHlwZW9mIiwiX19hd2FpdCIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiRXJyb3IiLCJkZWxlZ2F0ZSIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpc05hTiIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsIm1hcmsiLCJhd3JhcCIsImtleXMiLCJyZXZlcnNlIiwicG9wIiwicHJldiIsImNoYXJBdCIsInN0b3AiLCJydmFsIiwiaGFuZGxlIiwiZmluaXNoIiwiZGVsZWdhdGVZaWVsZCIsImFzeW5jR2VuZXJhdG9yU3RlcCIsIl9hc3luY1RvR2VuZXJhdG9yIiwiX25leHQiLCJfdGhyb3ciLCJEQl9OQU1FIiwiT0JKRUNUX1NUT1JFX05BTUUiLCJpbml0ZGIiLCJfcmVmIiwiX2NhbGxlZSIsIl9jb250ZXh0IiwiY29udGFpbnMiLCJjcmVhdGVPYmplY3RTdG9yZSIsImtleVBhdGgiLCJhdXRvSW5jcmVtZW50IiwiY29uc29sZSIsImxvZyIsImNvbmNhdCIsInQwIiwicHV0RGIiLCJfcmVmMiIsIl9jYWxsZWUyIiwiY29udGVudCIsIl9jb250ZXh0MiIsInB1dCIsImlkIiwiX3giLCJnZXREYiIsIl9yZWYzIiwiX2NhbGxlZTMiLCJfY29udGV4dDMiLCJnZXRBbGwiLCJzcGlubmVyIiwiX2RlZmF1bHQiLCJfY3JlYXRlQ2xhc3MiLCJfdGhpcyIsIl9jbGFzc0NhbGxDaGVjayIsImxvY2FsRGF0YSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJDb2RlTWlycm9yIiwiZWRpdG9yIiwicXVlcnlTZWxlY3RvciIsIm1vZGUiLCJ0aGVtZSIsImxpbmVOdW1iZXJzIiwibGluZVdyYXBwaW5nIiwiYXV0b2ZvY3VzIiwiaW5kZW50VW5pdCIsInRhYlNpemUiLCJpbmZvIiwic2V0VmFsdWUiLCJzZXRJdGVtIiwiZ2V0VmFsdWUiLCJtYWluIiwiaW5uZXJIVE1MIiwiRWRpdG9yIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFwcGVuZENoaWxkIiwiV29ya2JveCJdLCJzb3VyY2VSb290IjoiIn0=